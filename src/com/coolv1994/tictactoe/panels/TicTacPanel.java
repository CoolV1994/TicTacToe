package com.coolv1994.tictactoe.panels;

import com.coolv1994.tictactoe.AI;
import com.coolv1994.tictactoe.GameMode;
import com.coolv1994.tictactoe.Main;
import com.coolv1994.tictactoe.dialogs.HostMenuDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author vinnie
 */
public class TicTacPanel extends javax.swing.JPanel {

    private static final String[] POSITIONS = {
        "NW", "N", "NE", "W", "C", "E", "SW", "S", "SE"};
    private final GameMode mode;
    private AI ai;
    private boolean p2Turn;
    private byte turns;
    private int wins;
    private int losses;
    private int ties;
    private boolean ended;

    /**
     * Creates new form TicTacPanel
     */
    public TicTacPanel(GameMode mode) {
        Main.LOGGER.info("Loading game...");
        this.mode = mode;
        if (mode.equals(GameMode.AI)) {
            ai = new AI();
        }
        initComponents();
        addListeners();
        Main.LOGGER.info("Game ready.");
    }

    public javax.swing.JButton getButton(String position) {
        switch (position) {
            case "NW":
                return nw;
            case "N":
                return n;
            case "NE":
                return ne;
            case "W":
                return w;
            case "C":
                return c;
            case "E":
                return e;
            case "SW":
                return sw;
            case "S":
                return s;
            case "SE":
                return se;

        }
        return null;
    }

    public void setP2Turn() {
        this.p2Turn = true;
    }

    public boolean opponentTakeTurn(String position) {
        if (ended) {
            Main.remoteConnection.undo(position);
            return false;
        }
        javax.swing.JButton button = getButton(position);
        if (button == null)
            return false;
        if (button.getText().isEmpty()) {
            turns++;
            button.setText("O");
            p2Turn = !p2Turn;
            return true;
        }
        return false;
    }

    public void undoTurn(String position) {
        javax.swing.JButton button = getButton(position);
        if (button == null)
            return;
        if (!button.getText().isEmpty()) {
            turns--;
            button.setText("");
            p2Turn = !p2Turn;
            JOptionPane.showMessageDialog(this,
                    "Opponent is not yet ready.",
                    "Error",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nw = new javax.swing.JButton();
        n = new javax.swing.JButton();
        ne = new javax.swing.JButton();
        w = new javax.swing.JButton();
        c = new javax.swing.JButton();
        e = new javax.swing.JButton();
        sw = new javax.swing.JButton();
        s = new javax.swing.JButton();
        se = new javax.swing.JButton();
        javax.swing.JButton quitButton = new javax.swing.JButton();
        javax.swing.JLabel winLabel = new javax.swing.JLabel();
        winNum = new javax.swing.JLabel();
        javax.swing.JLabel lossLabel = new javax.swing.JLabel();
        loseNum = new javax.swing.JLabel();
        javax.swing.JLabel tieLabel = new javax.swing.JLabel();
        tieNum = new javax.swing.JLabel();

        nw.setName("NW"); // NOI18N

        n.setName("N"); // NOI18N

        ne.setName("NE"); // NOI18N

        w.setName("W"); // NOI18N

        c.setName("C"); // NOI18N

        e.setName("E"); // NOI18N

        sw.setName("SW"); // NOI18N

        s.setName("S"); // NOI18N

        se.setName("SE"); // NOI18N

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        winLabel.setText("W:");
        winLabel.setToolTipText("Wins");

        winNum.setText("0");

        lossLabel.setText("L:");
        lossLabel.setToolTipText("Losses");

        loseNum.setText("0");

        tieLabel.setText("T:");
        tieLabel.setToolTipText("Ties");

        tieNum.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nw, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ne, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(w, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sw, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(se, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(winLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(winNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lossLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loseNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tieLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tieNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ne, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nw, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(w, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sw, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(se, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton)
                    .addComponent(winLabel)
                    .addComponent(winNum)
                    .addComponent(lossLabel)
                    .addComponent(loseNum)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tieLabel)
                        .addComponent(tieNum)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        if (mode.equals(GameMode.SERVER)) {
            java.awt.EventQueue.invokeLater(() -> {
                HostMenuDialog dialog = new HostMenuDialog();
                dialog.setVisible(true);
            });
            return;
        }
        if (
                JOptionPane.showConfirmDialog(this,
                        "Are your sure you want to quit?",
                        "Quit Game",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE)
                != 0
            )
            return;
        if (mode.equals(GameMode.CLIENT)) {
            Main.remoteConnection.disconnect();
        }
        Main.setMainPanel();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void addListeners() {
        for (String position : POSITIONS) {
            javax.swing.JButton button = getButton(position);
            button.addActionListener((java.awt.event.ActionEvent evt)
                -> buttonActionPerformed(button, evt));
        }
    }

    private void buttonActionPerformed(javax.swing.JButton button, java.awt.event.ActionEvent evt) {
        if (!button.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "This spot is already taken.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (p2Turn) {
            if (mode.equals(GameMode.P2)) {
                button.setText("O");
            } else {
                JOptionPane.showMessageDialog(Main.gameFrame, "It is not your turn.", "Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } else {
            if (mode.equals(GameMode.CLIENT) || mode.equals(GameMode.SERVER)) {
                if (!Main.remoteConnection.sendMove(button.getName())) {
                    JOptionPane.showMessageDialog(Main.gameFrame, "Disconnected from opponent.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            button.setText("X");
        }
        turns++;

        if (mode.equals(GameMode.AI)) {
            checkIfGameOver();
            turns++;
            ai.takeTurn();
        }
        else {
            p2Turn = !p2Turn;
        }
        checkIfGameOver();
    }

    private void resetGameBoard() {
        turns = 0;
        for (String position : POSITIONS) {
            javax.swing.JButton button = getButton(position);
            button.setText("");
        }
        ended = false;
    }

    private void updateScoreBoard() {
        winNum.setText(String.valueOf(wins));
        loseNum.setText(String.valueOf(losses));
        tieNum.setText(String.valueOf(ties));
    }

    private void endGame(String victor) {
        ended = true;
        if (mode.equals(GameMode.CLIENT) || mode.equals(GameMode.SERVER)) {
            Main.remoteConnection.endGame();
        }
        switch (victor) {
            case "X":
                wins++;
                if (mode.equals(GameMode.P2)) {
                    victor = "Player 1";
                } else {
                    victor = "You";
                }
                break;
            case "O":
                losses++;
                if (mode.equals(GameMode.P2)) {
                    victor = "Player 2";
                } else {
                    victor = "Opponent";
                }
                break;
            default:
                ties++;
                victor = "Draw";
                break;
        }
        updateScoreBoard();
        JOptionPane.showMessageDialog(this,
                "The game is complete.\n" +
                "Winner is: " + victor,
                "Game Over",
                JOptionPane.INFORMATION_MESSAGE);
        resetGameBoard();
        if (mode.equals(GameMode.AI)) {
            ai.resetAI();
        }
    }

    public void checkIfGameOver() {
        if (ended) {
            return;
        }
        String txt = c.getText();
        if (!txt.isEmpty()) {
            if (txt.equals(nw.getText()) && txt.equals(se.getText())) {
                endGame(txt);
                return;
            }
            if (txt.equals(ne.getText()) && txt.equals(sw.getText())) {
                endGame(txt);
                return;
            }
            if (txt.equals(n.getText()) && txt.equals(s.getText())) {
                endGame(txt);
                return;
            }
            if (txt.equals(w.getText()) && txt.equals(e.getText())) {
                endGame(txt);
                return;
            }
        }

        txt = nw.getText();
        if (!txt.isEmpty()) {
            if (txt.equals(w.getText()) && txt.equals(sw.getText())) {
                endGame(txt);
                return;
            }
            if (txt.equals(n.getText()) && txt.equals(ne.getText())) {
                endGame(txt);
                return;
            }
        }

        txt = se.getText();
        if (!txt.isEmpty()) {
            if (txt.equals(e.getText()) && txt.equals(ne.getText())) {
                endGame(txt);
                return;
            }
            if (txt.equals(s.getText()) && txt.equals(sw.getText())) {
                endGame(txt);
                return;
            }
        }

        if (turns > 8) {
            endGame("Draw");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton c;
    private javax.swing.JButton e;
    private javax.swing.JLabel loseNum;
    private javax.swing.JButton n;
    private javax.swing.JButton ne;
    private javax.swing.JButton nw;
    private javax.swing.JButton s;
    private javax.swing.JButton se;
    private javax.swing.JButton sw;
    private javax.swing.JLabel tieNum;
    private javax.swing.JButton w;
    private javax.swing.JLabel winNum;
    // End of variables declaration//GEN-END:variables
}
